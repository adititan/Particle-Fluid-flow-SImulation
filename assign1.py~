import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

U = 1  		#freestream velocity      
Q0 = 1           #strength of source/sink
Q1 = -1
xmin = -2.5      
xmax = 2.5       
ymin = -2.5        
ymax = 2.5       
x0=-1
y0=0
x1=1
y1=0    
n = 250
	
x = np.linspace(xmin, xmax, n)
y = np.linspace(ymin, ymax, n)

X, Y = np.meshgrid(x, y)
z0 = complex(-1,0)
z1 = complex(1,0)

def f(X,Y):
	z = X + 1j*Y
	return (U*z + (1/(2 * np.pi))*(Q0*np.log(z - z0) + Q1*np.log(z - z1)))

def axis_function():
	ax = plt.gca()  
	ax.spines['right'].set_color('none')
	ax.spines['top'].set_color('none')
	ax.xaxis.set_ticks_position('bottom')
	ax.spines['bottom'].set_position(('data',0))
	ax.yaxis.set_ticks_position('left')
	ax.spines['left'].set_position(('data',0))


pp = PdfPages('Report_Assignment1.pdf')
plt.figure()
plt.clf()
plt.axes([0.025, 0.025, 0.95, 0.95])

plt.contourf(X, Y, f(X, Y).real, 40, alpha=.75, cmap=plt.cm.hot)
C = plt.contour(X, Y, f(X, Y).real, 40, colors='black', linewidth=.5)

plt.contourf(X, Y, f(X, Y).imag, 40, alpha=.75, cmap=plt.cm.hot)
S = plt.contour(X, Y, f(X, Y).imag, 40, colors='blue', linewidth=.5)

axis_function()
plt.xticks([-1,0, 1],[r'$-1$', r'$0$', r'$1$'])
plt.yticks([-2, 2],[r'$-2$', r'$2$'])
plt.title('Ques1. Plot of potential lines and stream lines for A source and a sink')	#Note to self: try moving it to the top
pp.savefig()  # saves the current figure into a pdf page

####Ques2
ques2 = np.linspace(-2,2,10)

def velocity(x,y):
	r0=np.sqrt((x-x0)**2 + (y-y0)**2)
	r1=np.sqrt((x-x1)**2 + (y-y1)**2)
	u = U + Q0*(x-x0)/(2*np.pi*r0**2) + Q1*(x-x1)/(2*np.pi*r1**2)
	v= Q0*(y-y0)/(2*np.pi*r0**2) + Q1*(y-y1)/(2*np.pi*r1**2)

	return u,v

def euler_ques2(delta_t):
	for j in range(0,10):
		x_0=-2;
		y_0= ques2[j]
		for i in range(0,500):
			[u,v] = velocity(x_0,y_0)
			x_1 = x_0 + delta_t * u
			y_1 = y_0 + delta_t * v
			plt.plot([x_0,x_1],[y_0,y_1])
			x_0 = x_1
			y_0 = y_1
	x_euler = x_0
	y_euler = y_0
	return x_euler,y_euler

def runge_ques2(delta_t):
	for j in range(0,10):
		x_0=-2;
		y_0= ques2[j]
		for i in range(0,500):
			[u,v] = velocity(x_0,y_0)
			x_mid = x_0 + delta_t * u
			y_mid = y_0 + delta_t * v
			[u1,v1] = velocity(x_mid,y_mid)
			x_1 = x_0 + 0.5*delta_t * u + 0.5*delta_t * u1
			y_1 = y_0 + 0.5*delta_t * v + 0.5*delta_t * v1
			plt.plot([x_0,x_1],[y_0,y_1])
			x_0 = x_1
			y_0 = y_1	
	x_runge = x_0
	y_runge = y_0
	return x_runge,y_runge


####Ques2 _ euler
plt.figure()
plt.clf()
euler_ques2(0.01)
axis_function()
pp.savefig()	

####Ques2 _ runge_kutta

plt.figure()
plt.clf()
runge_ques2(0.01)
axis_function()
plt.title("Question2: Using Runge-Kutta Integration for t=0.01")
pp.savefig()	

####Ques3____ Vortices
A0=2*np.pi	 #strength of vortices 
d=1.0		#distance
x_pos1=0	#position of vortices
y_pos1=0
x_pos2=1
y_pos2=0
def velocity_ques3(x0,y0,x1,y1):
	u = A0/(2*np.pi)*(y1-y0)/((x1-x0)**2 + (y1-y0)**2)
	v = -A0/(2*np.pi)*(x1-x0)/((x1-x0)**2 + (y1-y0)**2)
	return u,v

def position_ques3(time):
	[u1,v1] = velocity_ques3(x_pos2,y_pos2,x_pos1,y_pos1)
	vel1 = np.sqrt(u1**2+v1**2)
	[u2,v2] = velocity_ques3(x_pos1,y_pos1,x_pos2,y_pos2)
	vel2 = np.sqrt(u2**2+v2**2)
	r = np.sqrt((x_pos1-x_pos2)**2 + (y_pos1-y_pos2)**2) / 2.0
	theta1 = vel1*time /r
	theta2 = vel2*time /r
	x_actual1 = (x_pos1+x_pos2)/2.0 - r*np.cos(theta1)
	x_actual2 = (x_pos1+x_pos2)/2.0 + r*np.cos(theta2)
	y_actual1 = r*np.sin(theta1)
	y_actual2 = -r*np.sin(theta2)
	return x_actual1,y_actual1,x_actual2,y_actual2

def euler_ques3(delta_t):
	x_1, y_1, x_2, y_2 = x_pos1, y_pos1 , x_pos2, y_pos2
	for j in range(0,1000):
		[u1,v1] = velocity_ques3(x_2,y_2,x_1,y_1)
		x_next1 = x_1 + delta_t * u1
		y_next1 = y_1 + delta_t * v1
        	plt.plot([x_1,x_next1],[y_1,y_next1], color = "red") 
		x_1 = x_next1
		y_1 = y_next1
		[u2,v2] = velocity_ques3(x_1,y_1,x_2,y_2)			
		x_next2 = x_2 + delta_t * u2
		y_next2 = y_2 + delta_t * v2
        	plt.plot([x_2,x_next2],[y_2,y_next2], color = "blue") 
		x_2 = x_next2
		y_2 = y_next2
	x_euler1,x_euler2 = x_1 , x_2
	y_euler1,y_euler2 = y_1 , y_2	
	return x_euler1,y_euler1,x_euler2,y_euler2

def runge_ques3(delta_t):
	x_1, y_1, x_2, y_2 = x_pos1, y_pos1 , x_pos2, y_pos2
	for j in range(0,1000):
        	[u1,v1] = velocity_ques3(x_2,y_2,x_1,y_1)
        	x_mid1 = x_1 + delta_t * u1
		y_mid1 = y_1 + delta_t * v1
		[u_mid1,v_mid1] = velocity_ques3(x_2,y_2,x_mid1,y_mid1)
		x_next1 = x_1 + 0.5*delta_t * u1 + 0.5*delta_t * u_mid1
		y_next1 = y_1 + 0.5*delta_t * v1 + 0.5*delta_t * v_mid1
        	plt.plot([x_1,x_next1],[y_1,y_next1], color = "red") 
		x_1 = x_next1
		y_1 = y_next1
		[u2,v2] = velocity_ques3(x_1,y_1,x_2,y_2)
		x_mid2 = x_2 + delta_t * u2
		y_mid2 = y_2 + delta_t * v2
		[u_mid2,v_mid2] = velocity_ques3(x_1,y_1,x_mid2,y_mid2)			
		x_next2 = x_2 + 0.5*delta_t * u2 + 0.5*delta_t * u_mid2
		y_next2 = y_2 + 0.5*delta_t * v2 + 0.5*delta_t * v_mid2
        	plt.plot([x_2,x_next2],[y_2,y_next2], color = "blue") 
		x_2 = x_next2
		y_2 = y_next2
	x_runge1,x_runge2 = x_1 , x_2
	y_runge1,y_runge2 =  y_1 , y_2
	return x_runge1,y_runge1,x_runge2,y_runge2

####Ques3 _ euler

plt.figure()
plt.clf()
euler_ques3(0.005)
axis_function()
plt.title("Question 3: Using Euler Integration for t=0.005")
pp.savefig()	

####Ques3 _ runge_kutta

plt.figure()
plt.clf()
runge_ques3(0.01)
axis_function()
plt.title("Question3: Using Runge-Kutta Integration for t =0.01")
pp.savefig()

####Ques3 _ compare euler and runge_kutta

#del_t = [0.001,0.005, 0.01 , 0.02, 0.05 ]
del_t = [1000,200,100,50,20]
log_e =[]	 #euler error
log_r =[]	 #runge-kutta error

for delta_t in del_t:
	time = 1.0/delta_t * 1000
	[x_actual1,y_actual1,x_actual2,y_actual2] = position_ques3(time)
	[x_euler1,y_euler1,x_euler2,y_euler2] = euler_ques3(1.0/delta_t)
	[x_runge1, y_runge1,x_runge2,y_runge2] = runge_ques3(1.0/delta_t)
	error_xe1 = x_euler1 - x_actual1
	error_xe2 = x_euler2 - x_actual2
	error_ye1 = y_euler1 - y_actual1
	error_ye2 = y_euler2 - y_actual2
	error_xr1 = x_runge1 - x_actual1
	error_yr1 = y_runge1 - y_actual1
	error_xr2 = x_runge2 - x_actual2
	error_yr2 = y_runge2 - y_actual2
	error_e1 = np.sqrt(error_xe1**2 + error_ye1**2)
	error_e2 = np.sqrt(error_xe2**2 + error_ye2**2)
	log_e.append(np.log((error_e1+error_e2)/2))
	error_r1 = np.sqrt(error_xr1**2 + error_yr1**2)
	error_r2 = np.sqrt(error_xr2**2 + error_yr2**2)
	log_r.append(np.log((error_r1+error_r2)/2))
	
plt.figure()
plt.clf()
plt.plot(del_t,log_e, color="blue", linewidth=1.0, linestyle="-", label="euler")
plt.plot(del_t,log_r, color="green", linewidth=1.0, linestyle="-", label="runge")
plt.xlabel('1/delta_t')
plt.ylabel('log(error)')
plt.legend(loc='upper right')
plt.title('Results from Question 3.')
pp.savefig()

pp.close()	
